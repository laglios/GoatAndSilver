<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Brain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>Invisible_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//test and functionality variables
isMoving=false
turn=0
hasControl=true
cursor_position=0
cursor_menu=0
max_cursor = global.PARTY_SIZE - 1

//debug
global.PARTY[1]=global.AMBER
global.PARTY[2]=global.SORIA

//list of char
character= noone;

//init main character
Helgen[global.HP]=global.PARTY_STAT[#global.HELGEN,global.HP];
Helgen[global.MAXHP]=global.PARTY_STAT[#global.HELGEN,global.MAXHP];
Helgen[global.MP]=global.PARTY_STAT[#global.HELGEN,global.MP];
Helgen[global.MAXMP]=global.PARTY_STAT[#global.HELGEN,global.MAXMP];
Helgen[global.ATK]=global.PARTY_STAT[#global.HELGEN,global.ATK];
Helgen[global.DEF]=global.PARTY_STAT[#global.HELGEN,global.DEF];

//init Amber
Amber = noone
if(global.PARTY[1]!=noone){
    Amber[global.HP]=global.PARTY_STAT[#global.AMBER,global.HP];
    Amber[global.MAXHP]=global.PARTY_STAT[#global.AMBER,global.MAXHP];
    Amber[global.MP]=global.PARTY_STAT[#global.AMBER,global.MP];
    Amber[global.MAXMP]=global.PARTY_STAT[#global.AMBER,global.MAXMP];
    Amber[global.ATK]=global.PARTY_STAT[#global.AMBER,global.ATK];
    Amber[global.DEF]=global.PARTY_STAT[#global.AMBER,global.DEF];
}
//init guest
Char1 = noone
if(global.PARTY[2]!=noone){
    Char1[global.HP]=global.PARTY_STAT[#global.PARTY[2],global.HP];
    Char1[global.MAXHP]=global.PARTY_STAT[#global.PARTY[2],global.MAXHP];
    Char1[global.MP]=global.PARTY_STAT[#global.PARTY[2],global.MP];
    Char1[global.MAXMP]=global.PARTY_STAT[#global.PARTY[2],global.MAXMP];
    Char1[global.ATK]=global.PARTY_STAT[#global.PARTY[2],global.ATK];
    Char1[global.DEF]=global.PARTY_STAT[#global.PARTY[2],global.DEF]
}

//player's turn position
pos_helgenx[0]=room_width/3
pos_helgeny[0]=(room_height-112)/3.3

pos_amberx[0]=room_width/3
pos_ambery[0]=(room_height-112)/3.3+90

pos_charx[0]=room_width/3
pos_chary[0]=(room_height-112)/3.3+180

//HUD
health_timer=0
health_anim=0
menu_timer=0
menu_timer_big=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hasControl){
//---------necessary update---------//
health_timer++;
if(health_timer%7==0){
    health_anim+=1
}

if(health_anim==5)
    health_anim=0

//menu
if(menu_timer&lt;16)
    menu_timer++;

//-----------turn control-------------//
if(turn%2==0){//player's turn
    //if char need movement
    //helgen
    isMoving=false
    if(obj_battle_helgen.x!=pos_helgenx[0] or obj_battle_helgen.y!=pos_helgeny[0]){
    if(obj_battle_helgen.x&lt;pos_helgenx[0]+3 and obj_battle_helgen.x&gt;pos_helgenx[0]-3){
        obj_battle_helgen.x=pos_helgenx[0] ; isMoving=true
    }else if(obj_battle_helgen.x&gt;pos_helgenx[0]){
        obj_battle_helgen.x-=3 ; isMoving=true
    }else if(obj_battle_helgen.x&lt;pos_helgenx[0]){
        obj_battle_helgen.x+=3 ; isMoving=true
    }
    if(obj_battle_helgen.y&lt;pos_helgeny[0]+3 and obj_battle_helgen.y&gt;pos_helgeny[0]-3){
        obj_battle_helgen.y=pos_helgeny[0] ; isMoving=true
    }else if(obj_battle_helgen.y&gt;pos_helgeny[0]){
        obj_battle_helgen.y-=3 ; isMoving=true
    }else if(obj_battle_helgen.y&lt;pos_helgeny[0]){
        obj_battle_helgen.y+=3 ; isMoving=true
    }
    }
    //amber
    if(obj_battle_amber.x!=pos_amberx[0]or obj_battle_amber.y!=pos_ambery[0]){
    if(obj_battle_amber.x&lt;pos_amberx[0]+3 and obj_battle_amber.x&gt;pos_amberx[0]-3){
        obj_battle_amber.x=pos_amberx[0] ; isMoving=true
    }else if(obj_battle_amber.x&gt;pos_amberx[0]){
        obj_battle_amber.x-=3 ; isMoving=true
    }else if(obj_battle_amber.x&lt;pos_amberx[0]){
        obj_battle_amber.x+=3 ; isMoving=true
    }
    if(obj_battle_amber.y&lt;pos_ambery[0]+3 or obj_battle_amber.y&gt;pos_ambery[0]-3){
        obj_battle_amber.y=pos_ambery[0] ; isMoving=true
    }else if(obj_battle_amber.y&gt;pos_ambery[0]){
        obj_battle_amber.y-=3 ; isMoving=true
    }else if(obj_battle_amber.y&lt;pos_ambery[0]){
        obj_battle_amber.y+=3 ; isMoving=true
    }
    }
    //char1
    if(obj_battle_char1.x!=pos_charx[0]and obj_battle_char1.y!=pos_chary[0]){
    if(obj_battle_char1.x&lt;pos_charx[0]+3 and obj_battle_char1.x&gt;pos_charx[0]-3){
        obj_battle_char1.x=pos_charx[0] ; isMoving=true
    }else if(obj_battle_char1.x&gt;pos_charx[0]){
        obj_battle_char1.x-=3 ; isMoving=true
    }else if(obj_battle_char1.x&lt;pos_charx[0]){
        obj_battle_char1.x+=3 ; isMoving=true
    }
    if(obj_battle_char1.y&lt;pos_chary[0]+3 and obj_battle_char1.y&gt;pos_chary[0]-3){
        obj_battle_char1.y=pos_chary[0] ; isMoving=true
    }else if(obj_battle_char1.y&gt;pos_chary[0]){
        obj_battle_char1.y-=3 ; isMoving=true
    }else if(obj_battle_char1.y&lt;pos_chary[0]){
        obj_battle_char1.y+=3 ; isMoving=true
    }
    }
if(not obj_Camera_battle.mov){
    if(keyboard_check_pressed(vk_down)){
        cursor_position++;
        menu_timer=0
        if cursor_position &gt; max_cursor
            cursor_position=0;
    }
    if(keyboard_check_pressed(vk_up)){
        cursor_position--;
        if cursor_position &lt; 0
            cursor_position = max_cursor;
        menu_timer=0
    }
}
}else{//opponents' turn

}

}//end has control
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-------------HEALTH-----------//
draw_set_color(c_black)
draw_rectangle(view_xview[0],0,view_xview[0]+19,116,false)
draw_sprite(Health_bar_fluid,health_anim,view_xview[0],(116-(116*(Helgen[global.HP]/Helgen[global.MAXHP]))))

draw_set_color(c_black)
draw_rectangle(view_xview[0],116,view_xview[0]+19,116*2,false)
draw_sprite(Health_bar_Amber_fluid,health_anim,view_xview[0],116+(116-(116*(Amber[global.HP]/Amber[global.MAXHP]))))

draw_rectangle(view_xview[0],116*2,view_xview[0]+19,116*3,false)
draw_sprite(Health_bar_fluid,health_anim,view_xview[0],116*2+(116-(116*1)))

draw_sprite(Health_bar_Helgen,0,view_xview[0],0)

draw_sprite(Health_bar_Amber,0,view_xview[0],116)

draw_sprite(Health_bar_Helgen,0,view_xview[0],116*2)


draw_sprite_ext(spr_dialogue_box,0,view_xview[0],view_yview[0],2,2,0,c_white,1)

//obliger la barre à afficher la même chose pour 5% et en dessous

//-------------------Menu----------------//
if(turn%2==0 and not obj_Camera_battle.mov){
if(cursor_position==0){
    scr_box(obj_battle_helgen.x + 50 - view_xview[0],obj_battle_helgen.y - 70- view_yview[0],80,90)
    scr_box(obj_battle_helgen.x + 150 - view_xview[0],obj_battle_helgen.y - 70- view_yview[0],300,100)
    scr_display_stats(0)
    draw_sprite_ext(spr_cursor,0,obj_battle_helgen.x-30,obj_battle_helgen.y-sprite_get_height(spr_hg_walk_right)/2,1,1,-90,c_white,1)
}else if cursor_position==1{
    scr_box(obj_battle_amber.x + 50 - view_xview[0],obj_battle_amber.y - 70- view_yview[0],80,90)
    scr_box(obj_battle_amber.x + 150 - view_xview[0],obj_battle_amber.y - 70- view_yview[0],300,100)
    scr_display_stats(1)
    draw_sprite_ext(spr_cursor,0,obj_battle_amber.x-30,obj_battle_amber.y-sprite_get_height(spr_Character)/2,1,1,-90,c_white,1)
}else if cursor_position==2{
    scr_box(obj_battle_char1.x + 50 - view_xview[0],obj_battle_char1.y - 70- view_yview[0],80,90)
    scr_box(obj_battle_char1.x + 150 - view_xview[0],obj_battle_char1.y - 70- view_yview[0],300,100)
    scr_display_stats(2)
    draw_sprite_ext(spr_cursor,0,obj_battle_char1.x-30,obj_battle_char1.y-sprite_get_height(spr_Character)/2,1,1,-90,c_white,1)
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
